<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ | FINFUR</title>
    <link rel="icon" type="image/png" href="/images/logo_main.png">

    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = { darkMode: 'class' }; // ‡πÉ‡∏ä‡πâ dark mode ‡∏ú‡πà‡∏≤‡∏ô class
    </script>

    <!-- Swiper.js CSS (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Carousel) -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.css" />

    <!-- Custom Style -->
    <link rel="stylesheet" href="/style.css">
</head>
<body class="bg-white text-black dark:bg-gray-900 dark:text-white">
<div id="navbarContainer">
        <div id="defaultNavbar">
            <%- include('partials/narbar') %>
        </div>
        <div id="searchNavbar" style="display: none;">
            <%- include('partials/narbar_search') %>
        </div>
    </div>    
<main class="container mx-auto p-4">
    
    <h1 class="text-2xl font-bold text-center my-4">‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h1>

    <!-- Table Header -->
    <div class="bg-blue-100 p-2 rounded-lg flex items-center dark:bg-gray-700">
        <input type="checkbox" id='selectAll' class="mr-2  w-6 h-6 rounded">
        <span class="w-1/2">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</span>
        <span class="w-1/4 text-center">‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢</span>
        <span class="w-1/6 text-center">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</span>
        <span class="w-1/6 text-right">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏ß‡∏°</span>
    </div>
    
    <!-- ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ -->
    <div id="cart-items" class="my-4 space-y-4">
        <% if (userEmail) { %>
            <% product.forEach(item => { 
                let customStr = item.customValue;
                let customObj = JSON.parse(customStr);
                let customText = customObj.map(option => `${option.customName}: ${option.customValue}`).join(", ");

                let basePrice = Number(item.price) || 0;
                let addPrice = customObj.reduce((sum, option) => sum + (Number(option.addPrice) || 0), 0);
                let totalPrice = (basePrice + addPrice) * Number(item.quantities);
            %>
                <div class="flex items-center gap-4 p-4 border rounded-lg shadow-md  bg-white dark:text-black">
                    <input type="checkbox" class="productCheckbox w-7 h-7 rounded" 
                    data-price="<%= totalPrice %>" 
                    data-productid="<%= item.productID %>" 
                    data-customvalue='<%= customStr %>'
                    data-productName="<%= item.productName %>"
                    data-quantities="<%= item.quantities %>" 
                    >

                    <div class="flex items-center gap-4 p-4 border rounded-lg shadow-md">
                        <img 
                            src="/images/allProduct/<%= item.productID %>.png" 
                            alt="<%= item.productName %>" 
                            class="w-16 h-16 rounded-lg object-cover">
                    </div>
                    
                    <div class="flex-1">
                        <h2 class="text-lg font-semibold"><%= item.productName %></h2>
                        <p class="text-sm text-gray-500">‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</p>
            
                        <div class="flex items-center gap-2 mt-2">
                            <input 
                                type="text" 
                                class="p-2 bg-gray-100 rounded-md flex-1"
                                value="<%= customText %>"
                                readonly
                            >
                            <button class="px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 delete-btn" 
                                    data-productid="<%= item.productID %>" 
                                    data-customvalue='<%= customStr %>'>
                                ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                            </button>
                        </div>
                    </div>
            
                    <div class="flex items-center gap-2">
                        <span class="text-lg font-semibold text-gray-700">‡∏ø<%= totalPrice.toLocaleString() %></span>
                        <div class="flex items-center gap-2">
                            <button class="px-2 py-1 bg-gray-200 rounded-md update-quantity" data-action="decrease" data-productid="<%= item.productID %>" data-customvalue='<%= customStr %>'>-</button>
                        
                            <span class="px-3 py-1 bg-gray-100 rounded-md quantity-display" data-productid="<%= item.productID %>"><%= item.quantities %></span>
                        
                            <button class="px-2 py-1 bg-gray-200 rounded-md update-quantity" data-action="increase" data-productid="<%= item.productID %>" data-customvalue='<%= customStr %>'>+</button>
                        </div>
                        
                    </div>
                </div>
        <% });} %>
    </div>

    <!-- ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° -->
    <div class="flex justify-between items-center mt-6">
        <a href="/" class="px-4 py-2 border rounded-lg flex items-center">
            <span class="mr-2">‚¨Ö</span> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πà‡∏≠
        </a>

        <div class="flex space-x-4">
            <button id="deleteAllBtn" class="px-4 py-2 rounded-lg flex items-center bg-red-500 text-white rounded-md hover:bg-red-600 delete-btn">
                üóë ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </button>
            <a href="/checkout" id="checkoutBtn" class="px-6 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg">
                ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            </a>
        </div>
    </div>

    <!-- ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ -->
    <div class="text-right mt-4 text-lg font-bold">
        ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: <span id="total-price">0 ‡∏ö‡∏≤‡∏ó</span>
    </div>
    <script>
        function toggleSearch(event) {
            event.preventDefault();
            let searchMode = sessionStorage.getItem("searchMode") === "true";
            sessionStorage.setItem("searchMode", !searchMode);

            updateNavbar(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô navbar
        }

        function updateNavbar() {
            let searchMode = sessionStorage.getItem("searchMode") === "true";
            document.getElementById("defaultNavbar").style.display = searchMode ? "none" : "block";
            document.getElementById("searchNavbar").style.display = searchMode ? "block" : "none";
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
        document.addEventListener("DOMContentLoaded", updateNavbar);

        document.addEventListener("DOMContentLoaded", function () {
            const selectAllCheckbox = document.getElementById("selectAll");
            const checkboxes = document.querySelectorAll(".productCheckbox");
            const sumPriceE = document.getElementById("total-price");
            const deleteButtons = document.querySelectorAll(".delete-btn");
            const deleteAllBtn = document.getElementById("deleteAllBtn");
            const checkoutBtn = document.getElementById("checkoutBtn");


            function updateTotal() {
                let total = 0;
                checkboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        total += parseFloat(checkbox.getAttribute("data-price")) || 0;
                    }
                });
                sumPriceE.textContent = total.toLocaleString() + " ‡∏ö‡∏≤‡∏ó";
            }

            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener("change", function () {
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = selectAllCheckbox.checked;
                    });
                    updateTotal();
                });
            }
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener("change", function () {
                    if (selectAllCheckbox) {
                        selectAllCheckbox.checked = [...checkboxes].every(cb => cb.checked);
                    }
                    updateTotal();
                });
            });
            //delBtn
            async function deleteProduct(productID, customValue) {
                try {
                    const response = await fetch("/del-from-cart", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ productID, customValue })
                    });
                    const result = await response.json();
                    if (result.success) {
                        location.reload();
                    } else {
                        alert("‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
                    }
                } catch (error) {
                    console.error("Error:", error);
                    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
                }
            }

            deleteButtons.forEach(button => {
                button.addEventListener("click", function () {
                    const productID = this.getAttribute("data-productid");
                    const customValue = JSON.parse(this.getAttribute("data-customvalue"));
                    deleteProduct(productID, customValue);
                });
            });

            if (deleteAllBtn) {
                deleteAllBtn.addEventListener("click", function () {
                    const selectedProducts = Array.from(checkboxes)
                        .filter(checkbox => checkbox.checked)
                        .map(checkbox => ({
                            productID: checkbox.getAttribute("data-productid"),
                            customValue: JSON.parse(checkbox.getAttribute("data-customvalue"))
                        }));

                    if (selectedProducts.length === 0) {
                        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö");
                        return;
                    }

                    fetch("/del-from-cart", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ products: selectedProducts })
                    })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            location.reload();
                        } else {
                            alert("‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
                    });
                });
            }

            if (checkoutBtn) {
                checkoutBtn.addEventListener("click", function () {
                    const selectedProducts = Array.from(checkboxes)
                        .filter(checkbox => checkbox.checked)
                        .map(checkbox => ({
                            productID: checkbox.getAttribute("data-productid"),
                            productName: checkbox.getAttribute("data-productName"),
                            quantities: checkbox.getAttribute("data-quantities"),
                            eachTotalPrice: checkbox.getAttribute("data-price"),
                            customValue: checkbox.getAttribute("data-customvalue")
                        }));
                    if (selectedProducts.length === 0) {
                        //alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å");
                        return;
                    }

                    fetch("/cart-checkout", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ products: selectedProducts })
                    })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            location.reload();
                        } else {
                            alert("‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
                    });
                });
            }
        });
        

        const quantityButtons = document.querySelectorAll(".update-quantity");
        async function updateQuantity(productID, customValue, action) {
            try {
                const response = await fetch("/update-quantity", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ productID, customValue, action })
                });

                const result = await response.json();
                if (result.success) {
                    location.reload();
                } else {
                    alert("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
                }
            } catch (error) {
                console.error("Error:", error);
                alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
            }
        }

        quantityButtons.forEach(button => {
            button.addEventListener("click", function () {
                const productID = this.getAttribute("data-productid");
                const customValue = JSON.parse(this.getAttribute("data-customvalue"));
                const action = this.getAttribute("data-action");

                updateQuantity(productID, customValue, action);
            });
        });
       
    </script>
</main>
</body>
</html>
